/*
 * Copyright (c) 2015. Ronald D. Kurr kurr@jvmguy.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

def dockerDirectory = 'docker'
def buildArtifactName = "${project.name}-${version.toString()}"
def fullImageName = "jvm-guy/${project.name}:${version.toString()}"

task copyBuildArtifact( type: Copy, dependsOn: 'updateJarWithApiDocumentation' ) {
    from( 'build/libs/' ) {
        include "${buildArtifactName}.jar"
        rename "${buildArtifactName}.jar", "${project.name}.jar"   // always use the same artifact name to keep the dockerfile simple
    }
    into "$dockerDirectory/artifacts"
}

task buildDockerImage( type: Exec, dependsOn: copyBuildArtifact ) {
    group 'Docker'
    description = 'Builds a docker image'
    workingDir dockerDirectory
    commandLine 'sudo', 'docker', 'build', '--tag', fullImageName, '.'
    doFirst {
        logger.quiet "Building docker image $fullImageName based on the Dockerfile in $dockerDirectory/"
    }
}

/**
 * Deploys a docker container to a random port. Once deployed, docker is queried to retrieve the port number associated
 * with the new container. The port is then saved as a system property so it can be used later.
 */
task runDockerContainer( type: Exec, dependsOn: buildDockerImage ) {
    group 'Docker'
    description = 'Deploys a docker container based on a previously built image'
    commandLine 'sudo', 'docker', 'run', '--detach', '--publish', '8080', '--name', buildArtifactName, fullImageName, "--spring.profiles.active=integration"
    doFirst {
        logger.quiet "Running a docker container with name $buildArtifactName based on image $fullImageName"
    }
    doLast {
        def process = "sudo docker port $buildArtifactName".execute()
        def port = process.text.split( ':' ).last() as int
        logger.quiet "The container was deployed to port $port! Adding to system properties..."
        System.setProperty( 'integration.test.port', port.toString() )
        waitForServerToStart( port )
    }
}

private void waitForServerToStart( int port ) {
    def urlToPoll = "http://localhost:$port/operations/info".toURL()
    def serverUp = false
    def remainingAttempts = 40
    def secondsBetweenAttempts = 2
    while( !serverUp && remainingAttempts ) {
        logger.quiet "Waiting ${secondsBetweenAttempts} seconds before polling the server via $urlToPoll"
        remainingAttempts--
        sleep secondsBetweenAttempts * 1000
        try {
            def result = urlToPoll.text
            serverUp = true
            logger.quiet "The server is up! Response: $result"
        }
        catch( IOException e ) {
            logger.warn "The server is still not up. $remainingAttempts attempts remaining. Response details: ${e.message}"
        }
    }
    if ( !serverUp ) { throw new IllegalStateException( 'The server took too long to start' ) }
}

task deleteDockerContainer( type: Exec ) {
    group 'Docker'
    description = 'Deletes a docker container, even if it is running'
    commandLine 'sudo', 'docker', 'rm', '-f', buildArtifactName
    doFirst {
        logger.quiet "Deleting docker container $buildArtifactName from the host"
    }
}

task deleteDockerImage( type: Exec, dependsOn: deleteDockerContainer ) {
    group 'Docker'
    description = 'Deletes a docker image'
    commandLine 'sudo', 'docker', 'rmi', fullImageName
    doFirst {
        logger.quiet "Deleting docker image $fullImageName from the host"
    }
}
// ensure that we cleanup, especially if a failure occurs during server polling
runDockerContainer.finalizedBy deleteDockerImage
